{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './messages';\nimport API_URL from '../urls';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; // CHECK TOKEN & LOAD USER\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(`${API_URL}/auth/user`, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(`${API_URL}/auth/login`, body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // REGISTER USER\n\nexport const register = ({\n  username,\n  password,\n  email\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password\n  });\n  axios.post(`${API_URL}/auth/register`, body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(`${API_URL}/auth/logout/`, null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: 'CLEAR_LEADS'\n    });\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/armun/Documents/Web Projects/WebApp/iubconnect-frontend/src/actions/auth.js"],"names":["axios","returnErrors","API_URL","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","login","username","password","config","headers","body","JSON","stringify","post","register","email","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { returnErrors } from './messages'\nimport API_URL from '../urls'\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n} from './types'\n\n// CHECK TOKEN & LOAD USER\nexport const loadUser = () => (dispatch, getState) => {\n    // User Loading\n    dispatch({ type: USER_LOADING })\n\n    axios\n        .get(`${API_URL}/auth/user`, tokenConfig(getState))\n        .then((res) => {\n            dispatch({\n                type: USER_LOADED,\n                payload: res.data,\n            })\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status))\n            dispatch({\n                type: AUTH_ERROR,\n            })\n        })\n}\n\n// LOGIN USER\nexport const login = (username, password) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }\n\n    // Request Body\n    const body = JSON.stringify({ username, password })\n\n    axios\n        .post(`${API_URL}/auth/login`, body, config)\n        .then((res) => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data,\n            })\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status))\n            dispatch({\n                type: LOGIN_FAIL,\n            })\n        })\n}\n\n// REGISTER USER\nexport const register = ({ username, password, email }) => (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }\n\n    // Request Body\n    const body = JSON.stringify({ username, email, password })\n\n    axios\n        .post(`${API_URL}/auth/register`, body, config)\n        .then((res) => {\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data,\n            })\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status))\n            dispatch({\n                type: REGISTER_FAIL,\n            })\n        })\n}\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n    axios\n        .post(`${API_URL}/auth/logout/`, null, tokenConfig(getState))\n        .then((res) => {\n            dispatch({ type: 'CLEAR_LEADS' })\n            dispatch({\n                type: LOGOUT_SUCCESS,\n            })\n        })\n        .catch((err) => {\n            dispatch(returnErrors(err.response.data, err.response.status))\n        })\n}\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n    // Get token from state\n    const token = getState().auth.token\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    }\n\n    // If token, add to headers config\n    if (token) {\n        config.headers['Authorization'] = `Token ${token}`\n    }\n\n    return config\n}"]},"metadata":{},"sourceType":"module"}